name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]
    tags: [ '*' ]
  pull_request:
    branches: [ "master" ]

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_NAME: 'MESBlastBlockGenerator'
  SOLUTION_NAME: 'MESBlastBlockGenerator.sln'

jobs:
  # Build the application to verify it compiles correctly
  build:
    runs-on: windows-latest

    steps:
    # Checkout the code from the repository
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    # Restore all NuGet packages and dependencies
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_NAME }}

    # Build the application in Release configuration to verify compilation
    - name: Build application
      run: dotnet build ${{ env.SOLUTION_NAME }} --configuration Release --no-restore

  # Publish Windows artifacts for different architectures
  publish-windows:
    name: Publish Windows Artifacts
    needs: build
    runs-on: windows-latest
    strategy:
      matrix:
        runtime: [win-x64, win-x86]
    steps:
      # Checkout the code again for publishing step
      - name: Checkout
        uses: actions/checkout@v4
        
      # Install .NET Core SDK for publishing
      - name: Install .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # Publish self-contained executable for Windows
      # This creates a single executable file that includes .NET runtime
      - name: Publish for Windows
        run: |
          dotnet publish ${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj `
            --configuration Release `
            --runtime ${{ matrix.runtime }} `
            --self-contained true `
            -p:PublishSingleFile=true `
            -p:IncludeNativeLibrariesForSelfExtract=true `
            --output ./publish/${{ matrix.runtime }}
          
      # Upload the published artifacts for download
      # Artifacts will be available for 30 days
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-windows-${{ matrix.runtime }}
          path: ./publish/${{ matrix.runtime }}/
          retention-days: 30

  # Create GitHub Release - runs when any tag is pushed
  create-release:
    name: Create GitHub Release
    needs: publish-windows
    runs-on: ubuntu-latest
    # This job only runs when a tag is pushed (not on branch pushes or pull requests)
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      # Checkout the code to access release notes or other files if needed
      - name: Checkout
        uses: actions/checkout@v4

      # Download all previously uploaded artifacts
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          
      # Extract release notes from changelog file
      - name: Extract release notes
        id: release_notes
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "Tag name: $TAG_NAME"
          
          # Путь к файлу ChangeLog.md в папке проекта
          CHANGELOG_PATH="MESBlastBlockGenerator/ChangeLog.md"
          
          # Проверка существования файла
          if [ -f "$CHANGELOG_PATH" ]; then
            echo "Found changelog at: $CHANGELOG_PATH"
            
            # Извлечение секции между версиями
            sed -n "/^## \[$TAG_NAME\]/,/^## \[/p" "$CHANGELOG_PATH" | sed '$d' > release_notes.txt
            
            # Проверка, что файл не пустой
            if [ -s release_notes.txt ]; then
              echo "release_notes<<EOF" >> $GITHUB_OUTPUT
              cat release_notes.txt >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "release_notes=Release notes not found for version $TAG_NAME" >> $GITHUB_OUTPUT
            fi
          else
            echo "release_notes=No ChangeLog.md file found at $CHANGELOG_PATH" >> $GITHUB_OUTPUT
          fi
        
      # Create ZIP archives from the downloaded artifacts
      - name: Create release archives
        run: |
          cd artifacts
          for dir in */; do
            if [ -d "$dir" ]; then
              zip -r "${dir%/}.zip" "$dir"
            fi
          done

      # Create GitHub Release with the packaged artifacts
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./artifacts/*.zip
          draft: false
          prerelease: false
          body: ${{ steps.release_notes.outputs.release_notes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
